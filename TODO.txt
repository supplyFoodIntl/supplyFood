--database
create db creation script - constant improvement OK
create db fill script - constant ok (using rails console) 
    improve (use rake db:schema:dump)

--application
change all references of the term 'consumer to donee'

donation
    use boostrap tree view to good type
    check the problems on good insertion
    add donation status calculated
        sent - no supplier nor volunteer
        assigned - no supplier but volunteer
        scheduled - supplier and volunteer
        collected - has supply
        stored - has inventory
        to delivery - has delivery
        delivering - has some good delivered
        delivered - has all goods delivered
    destroy profile entity, now embedded on user ok
    set the donor (after ok on consent_form) ok move to a helper function
        start the consent forms on user creation pointing to the person linked to user ok
            add field `is_signed` and `signed_at` to consent form ok
            add field `valid until` ok
            refactor the consent form to include the consent form text and a checkbox 'i agree' to edit the consent form
                input the date time of the consent and the expiration date in the controller
                show the consent form expiration date in a alertbox before redirect back to the donation
                redirect to donation
    simplify the donation form
        full name ok
        phone number ok
        retrieve address ok
        goods (usng cocoon) ok
            find and insert if not found 
        send
    ajust new donation to bootstrap ok
    mvc created ok
        on first donation show the consent form ok
            set the user as donor ok
                show donor consent form ok
                get full name ok
                get address (simple form) ok
            jump to new donation
                on create 
                    create a blank supply
                add address to donation, not to donor, use 
                    test gem 'jt-rails-address', '~> 1.0' to the simple form, check gem install graticule https://github.com/collectiveidea/graticule too
                    then link the address to de person v2
    create a new supply (self or courier which can be third party supplier or a volunteer)
    ask to donate to a donation campaign or free donation
        create new good_type if there is no one


check management-person register

add sub menu to accordion on management menu

add consent form and consent form type ok
    required to become a donor, volunteer or supplier

create the donation form on mongodb, test on mLab and heroku
solve the problem of access control on heroku

add address class 
    test gem 'jt-rails-address', '~> 1.0' to the simple form, check gem install graticule https://github.com/collectiveidea/graticule too
    simple address form, all the treatment will be made after the registration
    add the city-state-country to the address form
    add public_place
        add search for zip
            use link_to to implement the listing on form ok
                make the line on the search result shine when hover
                apply create_if_not_exist on postal_code_hint when in public_place
                make the form smaller
                separate the javascript from erb
            make jquery works properly

            https://www.lugolabs.com/articles/jquery-ui-autocomplete-with-ruby-on-rails
            research why jquery and jquery ui only work on cdn and not on sprockets
    set the public place on address using the same mechanics of the public place over postal code hints 
    add private_place_type tab
    adjust the index to use bootstrap classes 
    adjust the edit , new and show views to bootstrap format
    on address insert new public_place if not exists and use an old one if exists
    on person insert and address if not exists and use an old one if exists

volunteer ok
    if user is not a volunteer
        show terms of  volunteering
        if ok 
            ask full name and address if dont exists
            
    add rank checkbox to the form
      check inventories
      deliver goods on campaigns

add rank to management tab

supplier
    if user is not a supplier
        show terms of supplying
    if ok
        ask full name and address if dont exists
    execute supplies
        check in and checkout by volunteers or managers
manager classes
    assignment
        supply
            select the courier available (volunteer or supplier)
        check
            select a volunteer
        deliver
            donation campaign
                select a group of volunteers
            single delivery
                select a volunteer
    collect check
        report collection by
            supplier
            volunteer
            donor
    delivery check
        report deliveries by 
            donation campaign
            good type
            volunteer
            consumer
            
delivery
    collect delivery check from consumers
        get ic number
            find the consumer
            if not found create a new one
        select the delivery package
        confirm the delivery
        get feedback from the consumer
    fix the good type selected by the donor on the donation system classification rules
    set the appropriate storage
    command volunteer to move supplies between inventories   

create links for every function on management menu
apply access control on the accordion

clean all the unused files

profile page
    adjust the page to bootstrap
    fill the username with the user_id from current_user on the new form
        
add usefullLinks
    set the list on home
    
add assignment classes for manager, volunteer and donor (define each actor a list of assignments, on the description field just for record)
add storage class
add donation class
add delivery class
add inventory class

add will_paginate to all index views on classes whose could have more than 10 records
    contact messages
    good_types ok
    people
    postal code hints
    users
    
    implement conventional user access
    implement 3rd party user access

add new flowchart to the about page

fix the error on rails server to stats.txt when editing some table, just editing(need to add a route?)

fix the object assignment to assignment (on all mvc & db)

error handling messages over a _errors.html.erb
    review constraints on domains table to not allow input on blank names
adjust all domain tables to bootstrap - solve de label name problem with form handler

change the `lost` assignment on business model to `check`
add Fundraise to the business model

include field `abbreviation` to measure unit
remove 'show' option in all domain table where there is only name field and redirect to show

add connectivity to facebook,twitter,youtube and instagram 

add contact form ok
    format in bootstrap ok
    just send by email 

implement log and sql log
    change tables to list on logFile OK
    reduce log listing to 100 lines OK
    implement log packing
    implement log search
    
add calendar of events (connection to https://www.eventbrite.com )
***** functions
 Manager
    Operations
        Donation Campaign
            Extend donation campaing
            End donation campaign
            Donation campaign diary
        Aknowledge lost
    Team management</li>
        Volunteers</li>
            Volunteers-to-be</li>
            List Volunteers</li>
            Admit Volunteer</li>
            Dismiss Volunteer</li>
            Send Thanks to Volunteer</li>
            Letter of recommendation</li>
        Suppliers</li>
            Suppliers-to-be</li>
            List Suppliers</li>
            Admit Supplier</li>
            Pay Supplier</li>
            Dismiss Supplier</li>
            Letter of recommendation</li>
        Training Schedule</li>
    Reports</li>
        Donor by donations</li>
        Collections by volunteer</li>
        Collections by supplier</li>
        Donation by region</li>
        Donations by good type</li>
        Deliveries by volunteer</li>
        Deliveries by consumer</li>
        Storages and Inventories</li>
Volunteer</h3>
    Call Center</li>
        Respond donations call</li>
        Direct mail</li>
            Donation request</li>
            Volunteer request</li>
    Operations</li>
        Check inventory</li>
        Execute disposal</li>
    Donation Campaign</li>
        Collect donations</li>
        Register consumer</li>
        Deliver donation</li>
        Add picture to donation campaign</li>
Supplier</h3>
    Accept supply call</li>
    Try reschedule supply call</li>
    Refuse supply call</li>
    End supply call with OK</li>
    End supply call with concerns</li>
    End supply call with fail</li>
Consumer</h3>
    Ask for food</li>
    Thanks for food</li>
    Point food insecurity</li>

change the donation counter from javascript to ajax jquery

run unit tests 
    to all models,
    controllers 
    and build a solid integrated test based on the test phase below

modularize public_place register on a separated app
-- test phase************************************
set a sort parameter for each management table, now is sorted by id (ok)
adjusting user creation to add a person and a profile pointing to the new user ok
ajust problems with jquery ok
    test widgets on a simple page ok
    disable turbolinks solved the problem. ok

person
    add user_email column to person (1:1 relation) ok
    create when the user is created ok
add number to public place ok
    zipcode hint ok
    block non numeric chacters ok
    model functions ok
use link_to to implement the listing on form
    using javacript ok
    redirecting to json ok
    search by code or hint ok
    solve the refresh problem on javascript - use ajax ok
    add country, state/province, city, neighborhood on the public place and postal_code_hint ok
    put city/state/country on one row and use combo boxes to fill it, same on postal_code_hint ok
    make the line on the search result shine when hover
    populate country table based on wikipedia ok
    ***** using city-state
    populate states from USA, Brazil, Canada and mexico based on wikipedia OK
      add the 10 biggest GDP  *aborted*
      test and change to country ruby gem https://github.com/hexorx/countries *using city-state*
      test and change to city-state ruby gem https://github.com/loureirorg/city-state ok
      set prefered country, state and city as configuration (use a staticvar as revision) ok
    change  public place hint
        separate public place and hint ok
    if con create there the postal code is not found create a new one with the public place data
    make the form smaller
    separate the javascript from erb
    move the 'seach by hint to the public place name' ok
    use ajax to fill a div with the json content v2

adjust the site to bootstrap 4 now installed ok
    navbar - include brand - supply!food, right buttons should be right
    footer - ok
    tab - ok
    tables container - ajust to fit the tab space - ok

migrate to supplyFood2 with devise installed *aborted*
clean previous devise installation and research about devise on rails 5 solved
    change all the authentication sytem to devise, keeping the current layout ok
        show the username on navbar ok, improve style
        the authentication will occur with email/password ok
            password digest when the user respond from the link on email v2
            remove ic and ic type demand from donors ok
        to donate, volunteer ou supply the user must to complete the registration ok
            make the form fills on one page ok
                add city field
                put city (add), state and country in one line 
            form_user **devise
            format on bootstrap ok
            implement email check v2
            create a trigger on pg to decouple the user into the tables v2

add user on one form only
    the authentication will occur with email/password
        remove ic and ic type demand from donors ok
    make the form fills on one page ok
    form_user
        user ok
        person ok
        phones ok
        addresses ok
add routes for all the links on the main page OK
put the management under div with scroll bar ok (just for log, the other models will use the browser scroll)
review the 'last update' on footer to avoid do a query every page (use initialization variable) OK
    http://railscasts.com/episodes/1-caching-with-instance-variables?autoplay=true
    
adjust text collor on navbar to better contrast OK
make the home a jumbotron ok
check style against dummy html ok
make click on plate or name supply!food leads to home OK
create a top navbar to use sign in , signup, logo, brand, about, contact - keep the logo and brand on sidenav - ok

add version and last review to website ok
rebuild person based on rails standards
put all domain names on a tab
review the color,zindex and transparency of the top nav bar - set links to buttons and adjust alignment 
implement the splash start screen with jumbotron
solve the problem on save person using the combo box OK (person crud as reference)

    create user ok
    research 3rd party authentications ok
    include a user listing on tab ok

domain objects
    configuration (apply configurations to home pages) ok
    level ok
    goodType ok
    log ok read only
    sqllog ok read only
    measureUnit ok
    postalCodeHint ok
        scaffold generated ok
        adjust views to support the tab ok
        adjust the index to use bootstrap classes ok
        adjust the edit , new and show views to bootstrap format ok

fix the first click on management link ok
adjust views to support the tab ok
fix glitch on navbar when sign up ok
fix glitch on navbar which makes it transparent ok

add users to management menu ok

add signin and sign up 
    modify user controller to support 4 methods ok
        sign in
            use strong password storage and verification ok
            add user name on the navbar after sign in ok
        sign up
            create user in a single form *** using devised, not necessary anymore***
            add address class ok
            put it on sign up ** later, on the profile page ***
        sign out - *** using devised, not necessary anymore***
        only show sign out if the user is signed in
        reset password *** using devised, not necessary anymore***
        make signup, signin and signout on the same button on the right of the navbar ok

add call center module
    contacts
    calls
        replies
        services (social assistance, snaps, health, nutrition)
    
-------------v2************************************************

use jquery autocomplete on zip v2
add user on one form only
    using cocoon
    try a different approach from the video, when click on new address just add an address to the current person using partial form (first on person, later on the address)...allow a max for 4 addresses per person
    test jquery functions on rails ok
    
    make a poc of jquery on rails - using cocoon 
        1 - make a simple jquery page ok
        2 - port it to rails ok
        http://192.168.0.106:3000/my_jquery_test
        3 - improve it 
            create a simulation of a form with labels and texts ok
                solve the 'remove all problem'
                use console do register each step, not alert
            create combo boxes
            create a full fledged form
            separate the script from the view in a .js
            
plan the construction of 'skins' to supply!food using alterations on application.html.erb v2

implement ajax on the tables of management v2
    tables with pagination first
    lesser tables later
    apply jqueryte to edit the configuration files (https://github.com/pan/jqueryte)
build major entities data mirror using xml and json for report transformations v2

    use jupyter notebook v2
    http://blog.scoutapp.com/articles/2017/10/13/visualizing-rails-logs-with-jupyter-notebook


contact form
    add reply button v2
    add read flag v2
    add replied flag v2
    add comment flag v2
    add links to another contact forms v2
    list contact by user, date, option to expand the tree v2
remember *******************
<%= current_page?(controller: 'people', action: 'index')%> get controller name and action
------------research

reasearch about code coverage in rails
research about continuous integrarion with travis ci
research about the best practices on localization for rails
research how to generate a form with many models (for user management)
research about the use of robots.txt
research about scaffold customization or xslt transform on views scaffolded
research map pointing on google to save locations of hunger sensible areas
research about formstatic and simpleform

